package model

import (
    "time"

    "github.com/xeipuuv/gojsonschema"
)

var (
    schemaLoader = gojsonschema.NewSchemaLoader()
    {{ range $index, $element := .Swagger.Definitions }}{{ $index }}Schema = new(gojsonschema.Schema)
{{ end }})

func init() {
    err := schemaLoader.AddSchemas(
    {{ range $index, $element := .Swagger.Definitions }}gojsonschema.NewStringLoader(`{{ toJSON $index $element }}`),
    {{ end }}
    )
    if err != nil {
        panic(err)
    }

    {{ range $index, $element := .Swagger.Definitions }}{{ $index }}Schema = mustCompile(`#/definitions/{{ $index }}`)
{{ end }}}

{{ range $index, $element := .Swagger.Definitions }}{{ if eq $element.Type "object" }}
type {{ $index }} struct {
	{{ range $pindex, $pelement := .Properties }} {{ export $pindex }} {{ goType $pindex $pelement $element.Required }} `json:"{{ $pindex }}{{ if omitempty $pindex $element.Required }},omitempty{{ end }}"`
{{ end }}}{{ end }}{{ if eq $element.Type "array" }}
type {{ $index }} []{{ goType "" $element.Items $element.Required }}
{{ end }}

{{ end }}

func mustCompile(uri string) *gojsonschema.Schema {
    s, err := schemaLoader.Compile(gojsonschema.NewReferenceLoader(uri))
    if err != nil {
        panic(err)
    }
    return s
}

const (
{{ range $index, $element := .Swagger.Definitions }}{{ range $pindex, $pelement := .Properties }}{{ range $eindex, $eelement := .Enum }}
{{ $index | export }}{{ $pindex | export }}{{ $eelement | export }} = "{{ $eelement }}"
{{ end }}{{ end }}{{ end }}
)
