{{ define "handler" }}
  {{- if .OperationID }}
    func (s *server){{ .OperationID }}Handler(w http.ResponseWriter, r *http.Request) {
    {{- $multiPart := 0}}
    {{- range $parameter := .Parameters }}
      {{- if eq $parameter.In "formData" }}
        {{- $multiPart = 1}}
      {{- end }}
    {{- end }}
    {{- if $multiPart}}
	  const MaxFileSize = 32 << 20 // maximum file size of about 32 MB
	  if r.ContentLength > MaxFileSize {
		JSONErrorStatus(w, http.StatusExpectationFailed, errors.New("request too large"))
		return
	  }
	  err := r.ParseMultipartForm(MaxFileSize)
      if err != nil {
        JSONError(w, err)
        return
      }
    {{- end}}
    {{- range $parameter := .Parameters }}
      {{- if eq $parameter.In "path" }}
        {{- if eq (parameterType $parameter) "string" }}
          {{ $parameter.Name }}P := chi.URLParam(r, "{{ $parameter.Name }}")
        {{ else }}
          {{ $parameter.Name }}P, err := parseURL{{ parameterType $parameter | export }}(r, "{{ $parameter.Name }}")
          if err != nil {
          JSONError(w, err)
          return
          }
        {{ end }}
      {{ else if eq $parameter.In "body" }}
        body, err := io.ReadAll(r.Body)
        if err != nil {
          JSONError(w, err)
          return
        }

        {{ if ne $parameter.Schema.Ref "" }}
          if validateSchema(body, {{ parameterName $parameter }}Schema, w) {
            return
          }
        {{- end }}

        var {{ $parameter.Name }}P {{ parameterType $parameter }}
        if err := parseBody(body, &{{ $parameter.Name }}P); err != nil {
        JSONError(w, err)
        return
        }
      {{ else if eq $parameter.In "query" }}
        {{- if eq (parameterName $parameter) "String" }}
          {{ $parameter.Name }}P := r.URL.Query().Get("{{ $parameter.Name }}")
        {{ else }}
          {{ $parameter.Name }}P, err := parseQuery{{ if not $parameter.Required}}Optional{{end}}{{ parameterName $parameter }}(r, "{{ $parameter.Name }}")
          if err != nil {
            JSONError(w, err)
            return
          }
        {{- end }}
      {{ else if eq $parameter.In "formData" }}
        {{- if eq $parameter.Type "file" }}
          {{ $parameter.Name }}P := r.MultipartForm.File["{{ $parameter.Name }}"]
        {{- else }}
          {{ $parameter.Name }}P := r.MultipartForm.Value["{{ $parameter.Name }}"]
        {{- end }}
      {{ else }}
        var {{ $parameter.Name }}P {{ parameterType $parameter }}
        parse{{ $parameter.In | export }}(r, "{{ $parameter.Name }}", &{{ $parameter.Name }}P)
      {{ end -}}
    {{- end }}
    {{- if index .Responses "200" }}
      result, err := s.service.{{ .OperationID | export }}(r.Context(){{ range $index, $parameter := .Parameters }},{{ if and (not $parameter.Required) (eq (parameterName $parameter) "String") }}&{{end}}{{ $parameter.Name }}P{{ end -}})
      response(w, result, err)
    {{ else }}
      response(w, nil, s.service.{{ .OperationID | export }}(r.Context(){{ range $index, $parameter := .Parameters }},{{ if and (not $parameter.Required) (eq (parameterName $parameter) "String") }}&{{end}}{{ $parameter.Name }}P{{ end -}}))
    {{ end -}}
    }
  {{ end -}}
{{ end }}

package api

import (
  {{- $multiPartImport := 0 }}
  {{- range $path, $pathItem := .Swagger.Paths }}
    {{- with $pathItem.Put }}
      {{- range $parameter := .Parameters }}
        {{- if eq $parameter.In "formData" }}
          {{- $multiPartImport = 1 }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- with $pathItem.Post }}
      {{- range $parameter := .Parameters }}
        {{- if eq $parameter.In "formData" }}
          {{- $multiPartImport = 1 }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
  "context"
  {{- if $multiPartImport }}
    "errors"
  {{- end }}
  "io"
  {{- if $multiPartImport }}
    "mime/multipart"
  {{- end }}
  "net/http"

  "github.com/go-chi/chi"

  "{{ .ImportPath }}/model"
)

type Service interface {
{{ range $path, $pathItem := .Swagger.Paths }}
  {{- with $pathItem.Get }}
    {{- if .OperationID }}
      {{ .OperationID | export }}(context.Context{{ range $index, $parameter := .Parameters }},{{ parameterType $parameter }}{{ end -}}) ({{ if index .Responses "200" }}{{ responseType .Responses }}, {{ end }}error)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Post }}
    {{- if .OperationID }}
      {{ .OperationID | export }}(context.Context{{ range $index, $parameter := .Parameters }},{{ parameterType $parameter }}{{ end -}}) ({{ if index .Responses "200" }}{{ responseType .Responses }}, {{ end }}error)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Put }}
    {{- if .OperationID }}
      {{ .OperationID | export }}(context.Context{{ range $index, $parameter := .Parameters }},{{ parameterType $parameter }}{{ end -}}) ({{ if index .Responses "200" }}{{ responseType .Responses }}, {{ end }}error)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Patch }}
    {{- if .OperationID }}
      {{ .OperationID | export }}(context.Context{{ range $index, $parameter := .Parameters }},{{ parameterType $parameter }}{{ end -}}) ({{ if index .Responses "200" }}{{ responseType .Responses }}, {{ end }}error)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Delete }}
    {{- if .OperationID }}
      {{ .OperationID | export }}(context.Context{{ range $index, $parameter := .Parameters }},{{ parameterType $parameter }}{{ end -}}) ({{ if index .Responses "200" }}{{ responseType .Responses }}, {{ end }}error)
    {{- end -}}
  {{- end -}}
{{ end }}
}

func NewServer(service Service, roleAuth func([]string)func(http.Handler) http.Handler, middlewares ...func(http.Handler) http.Handler) chi.Router {
  r := chi.NewRouter()
  r.Use(middlewares...)

  s := &server{service}
{{ range $path, $pathItem := .Swagger.Paths }}
  {{- with $pathItem.Get }}
    {{- if .OperationID }}
      r.With(roleAuth([]string{ {{ .Security | roles | printf "%#v" }} })).Get("{{ $path }}", s.{{ .OperationID }}Handler)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Post }}
    {{- if .OperationID }}
      r.With(roleAuth([]string{ {{ .Security | roles | printf "%#v" }} })).Post("{{ $path }}", s.{{ .OperationID }}Handler)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Put }}
    {{- if .OperationID }}
      r.With(roleAuth([]string{ {{ .Security | roles | printf "%#v" }} })).Put("{{ $path }}", s.{{ .OperationID }}Handler)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Patch }}
    {{- if .OperationID }}
      r.With(roleAuth([]string{ {{ .Security | roles | printf "%#v" }} })).Patch("{{ $path }}", s.{{ .OperationID }}Handler)
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Delete }}
    {{- if .OperationID }}
      r.With(roleAuth([]string{ {{ .Security | roles | printf "%#v" }} })).Delete("{{ $path }}", s.{{ .OperationID }}Handler)
    {{- end -}}
  {{- end -}}
{{ end }}
  return r
}

type server struct {
  service Service
}

{{ range $path, $pathItem := .Swagger.Paths }}
  {{- with $pathItem.Get }}
    {{- if .OperationID }}
      {{ template "handler" . }}
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Post }}
    {{- if .OperationID }}
      {{ template "handler" . }}
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Put }}
    {{- if .OperationID }}
      {{ template "handler" . }}
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Patch }}
    {{- if .OperationID }}
      {{ template "handler" . }}
    {{- end -}}
  {{- end -}}
  {{- with $pathItem.Delete }}
    {{- if .OperationID }}
      {{ template "handler" . }}
    {{- end -}}
  {{- end -}}
{{ end }}
